Best Practices

    In a high load multiuser application it is always a challenge  between logging enough and logging too much.
    
    This article summarizes best practices which will let you have enough of log information and minimize affect on performance, disk usage and (surprise?) security. 
        
*Reasons to log
    	There are many reasons why we want to log what application is doing.
    	The first and the most obvious one is that we want to know what was going on at a given date and time. This may be needed for a security audit, performance audit, and can provide a lot of information for the third line of support. 
    	The second reason is for analyzing application errors, we often want to know which path leads to particular error.
    	The third reason is to notify a watch dog about problems (e.g. if you have ERRORs in logs or WARN message shows up too often).
    	The fourth reason is tracing. We might need it when we want to run some tests on a legacy application trying to figure out how it works in particular case.
 
   
*Which information to log
        Good candidates are: states of application (e.g. started),  operations that lead to a particular state (connectionFactory.stop()) 
        Methods of controllers, DAO and repositories classes, and session beans. 
    	Log thread's name, this will allow you to distinct one thread from the other when you will analyze the log.
    	In case you use Zipkin (or similar software), you must log request ID (your only way to survive in a asynchronous applications microservices world). 
    	If it is a multiuser service, always add login or user ID, as well as jSessionId via {{{http://logback.qos.ch/manual/mdc.html}MDC}} to your log, and always add thread name to log pattern. 
    	
*Who is interested in log information:
  		Theory:
 			Log information can be divided into following groups: 
 				System logging - represents information for system administrators (e.g. service started successfully, service failed to started/failed to start/stopped/failed to stop/crashed, remote service available/unavailable etc)  
 				Business logging -  Information for audit and business analysts (e.g. user logged in/out, order created, account closed, etc...)
 				Profile logging - represents information for software developers (e.g. which parameters were passed to a method that raised an exception, what was returned from a method, etc...)
 				Security audit logging - who did what and when?
			Implementation:
				This information should be assembled by loggers with different names. 
				For administrators you  can use admininstation.serviceName
				For software developers you can use class name as logger name
				For audit and business analysis you can use  audit.serviceName 
				Store this logs into different appenders or in one appender but make sure to add logger name in a pattern.
    	
*Where to accumulate logs
		There are various ways where to accumulate log.
    	In case you produce a systemd service you should log to syslog-ng or rsyslog. 
    	In docker containers log only to console.
		If you use files make sure you setup log rotation and compression of rotated files.
    	 
    	On a high load service you will often use an hour as a log rotation interval yet on less busy systems a day log rotation is usually enough.
    	A high load  service will generates gigabytes of logs in a gz format within a day (welcome to a real high load world) despite disk space is cheap these days
    	there are situations when you have to store the data for several years (e.g banking software has to do it for security reasons).
    	In this case consider storing your logs to {{{https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-hdfs/HdfsUserGuide.html}HDFS}} or similar distributed file system.
    	Some ready implementation for log accumulations are:
    	https://flume.apache.org
    	https://chukwa.apache.org/
    	http://www.fluentd.org
    	https://www.elastic.co/products/logstash
    	 https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_GettingStarted.html


*How to log without significant drawback to performance
    	On a high load service the only option is to log asynchronously (Synchronous operation will cause a lot of blocking and drag performance down).
    	Make sure your log on a device other than your local cache store or database (sounds simple but so many step into this trap over and over again).
    	In docker containers log only to console, never to a file!

    	
*What not to include to log 
       Non informative data. E.g. objects without meaningful toString implementation.
       Large arrays, collections, large strings, byte arrays, streams, xml and json requests.
       Credentials, names, phones, emails, plastic card information, PASSWORDS for security reasons.
    
	